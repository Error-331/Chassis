<?php

/**
 * Chassis
 * 
 * NOTICE OF LICENSE 
 * 
 * This source file is subject to the GNU GENERAL PUBLIC LICENSE (Version 3)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.gnu.org/licenses/gpl.html
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to red331@mail.ru so we can send you a copy immediately.   
 * 
 * Class plcError is a part of PHP framework - Chassis.   
 * 
 * @package     Chassis
 * @author      Selihov Sergei Stanislavovich <red331@mail.ru> 
 * @copyright   Copyright (c) 2010-2011 Selihov Sergei Stanislavovich.
 * @license     http://www.gnu.org/licenses/gpl.html  GNU GENERAL PUBLIC LICENSE (Version 3)
 *    
 */
 
/**
 * Classes for error handling.
 *  
 * @subpackage ErrorHandling
 * @author Selihov Sergei Stanislavovich <red331@mail.ru>   
 */
 
/**
 * Documents the plcError class.
 * 
 * Following class is a deprecated representation of error for Chassis framework. This classes may be used for error throwing 
 * instead of standart exception model.
 *   
 * @subpackage plcError
 * @author Selihov Sergei Stanislavovich <red331@mail.ru>   
 */
 
require_once('Chassis/ErrorHandling/plcAbstractError.php');

class plcError extends plcAbstractError
	{
  /**
   * @access protected
   * @var const error level name 
   */	
	
	protected $ErrorLevel = null;
	
  /**
   * @access protected
   * @var int error code number 
   */	
	
	protected $ErrorCode = null;
	
  /**
   * @access protected
   * @var string short error information 
   */	
	
	protected $ErrorMessage = null;
	
  /**
   * @access protected
   * @var string full error information 
   */	
	
	protected $ErrorInfo = '';
	
  /**
   * @access protected
   * @var string name of the file where error occured 
   */	

	protected $ErrorFileName = '';
	
  /**
   * @access protected
   * @var int line number on which error was thrown 
   */	
	
	protected $ErrorLineNumber = 0;
	
  /**
   * @access protected
   * @var string class name in which error was occured 
   */	

	protected $ErrorClassName = '';
	
  /**
   * @access protected
   * @var string function name in which error was occured 
   */	
	
	protected $ErrorFunction = '';
	
  /**
   * @access protected
   * @var array argiments to a function in which error was occured 
   */	
	
	protected $ErrorFunctionArgs = array();
	
  /**
   * @access protected
   * @var string type of the error
   */	

	protected $ErrorType = '';
	
  /**
   * @access protected
   * @var array generated by debug_backtrace() function
   */	
	
	protected $ErrorBacktrace = '';

	public function __construct($usrLevel, $usrCode, $usrMessage, $usrInfo = null) 
		{
		$this->CreateErrorObject($usrLevel, $usrCode, $usrMessage, $usrInfo);
		}
		
	public function __destruct() 
		{
		}

  /**
   * Function that used to create error object.
   * 
   * Core function that creates the error object. It is called within the constructor function. 
   * 
   * @access protected 
   *    
   * @param const error level name.
   * @param int error code number.  
   * @param string short error information.
   * @param string full error information.   
   *                         
   */  

	protected function CreateErrorObject($usrLevel, $usrCode, $usrMessage, $usrInfo = null)
		{
		static $RaiseFunctions = array('Raise', 'RaiseError', 'RaiseWarning','RaiseNotice');
										
		$this->ErrorLevel = $usrLevel;
		$this->ErrorCode = $usrCode;
		$this->ErrorMessage = $usrMessage;
		
		if($usrInfo != null)
			{
			$this->ErrorInfo = $usrInfo;
			}

		if(function_exists('debug_backtrace')) 
			{
			$this->ErrorBacktrace = debug_backtrace();

			for($Counter1 = count($this->ErrorBacktrace) - 1; $Counter1 >= 0; --$Counter1)
				{
				if(in_array($this->ErrorBacktrace[$Counter1]['function'], $RaiseFunctions))
					{
					++$Counter1;

					if(isset($this->ErrorBacktrace[$Counter1]['file']))
						{
						$this->ErrorFileName = $this->ErrorBacktrace[$Counter1]['file'];
						}

					if(isset($this->ErrorBacktrace[$Counter1]['line']))
						{
						$this->ErrorLineNumber = $this->ErrorBacktrace[$Counter1]['line'];
						}

					if(isset($this->ErrorBacktrace[$Counter1]['class']))
						{
						$this->ErrorClassName =	$this->ErrorBacktrace[$Counter1]['class'];
						}

					if(isset($this->ErrorBacktrace[$Counter1]['function']))
						{
						$this->ErrorFunction = $this->ErrorBacktrace[$Counter1]['function'];
						}

					if(isset($this->ErrorBacktrace[$Counter1]['type']))
						{
						$this->ErrorType = $this->ErrorBacktrace[$Counter1]['type'];
						}
					
					$this->ErrorFunctionArgs = false;

					if(isset($this->ErrorBacktrace[$Counter1]['args']))
						{
						$this->ErrorFunctionArgs = $this->ErrorBacktrace[$Counter1]['args'];
						}

					break;
					}
				}
			}
		}
		
  /**
   * Function that used to return current error level name.
   * 
   * Simple function that returns current error level name.
   * 
   * @access public 
   *    
   * @return const current error level name.  
   *                              
   */ 

	public function GetErrorLevel()
		{
		return $this->ErrorLevel;
		}

  /**
   * Function that used to return current error code number.
   * 
   * Simple function that returns current error code number.
   * 
   * @access public 
   *    
   * @return int current error code number.
   *                                
   */ 

	public function GetErrorCode()
		{
		return $this->ErrorCode;
		}
		
  /**
   * Function that used to return current short error information.
   * 
   * Simple function that returns current short error information.
   * 
   * @access public 
   *    
   * @return string current error short error information.
   *                                
   */ 

	public function GetErrorMessage()
		{
		return $this->ErrorMessage;
		}
		
  /**
   * Function that used to return current full error information.
   * 
   * Simple function that returns current full error information.
   * 
   * @access public 
   *    
   * @return string current error full error information.
   *                                
   */ 

	public function GetErrorInfo()
		{
		return $this->ErrorInfo;
		}
		
  /**
   * Function that used to return current name of the file where error occured.
   * 
   * Simple function that returns current name of the file where error occured.
   * 
   * @access public 
   *    
   * @return string current name of the file where error occured.
   *                                
   */ 

	public function GetErrorFileName()
		{
		return $this->ErrorFileName;
		}
		
  /**
   * Function that used to return current line number on which error was thrown.
   * 
   * Simple function that returns current line number on which error was thrown.
   * 
   * @access public 
   *    
   * @return int current name line number on which error was thrown.
   *                                
   */ 

	public function GetErrorLineNumber()
		{
		return $this->ErrorLineNumber;
		}
		
  /**
   * Function that used to return current generated by debug_backtrace() function data.
   * 
   * Simple function that returns current generated by debug_backtrace() function data.
   * 
   * @access public 
   *    
   * @return array current generated by debug_backtrace() function data.
   *                                
   */

	public function GetErrorBacktrace()
		{
		return $this->ErrorBacktrace;
    }
	}

?>