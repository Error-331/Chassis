<?php

/**
 * Chassis
 * 
 * NOTICE OF LICENSE 
 * 
 * This source file is subject to the GNU GENERAL PUBLIC LICENSE (Version 3)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.gnu.org/licenses/gpl.html
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to red331@mail.ru so we can send you a copy immediately.   
 * 
 * Class plcUkrGarantWebMoneyController is a part of PHP framework - Chassis.   
 * 
 * @package     Chassis
 * @author      Selihov Sergei Stanislavovich <red331@mail.ru> 
 * @copyright   Copyright (c) 2010-2011 Selihov Sergei Stanislavovich.
 * @license     http://www.gnu.org/licenses/gpl.html  GNU GENERAL PUBLIC LICENSE (Version 3)
 *    
 */

/**
 * Classes for work with payment systems.
 *  
 * @subpackage PaymentSystems
 * @author Selihov Sergei Stanislavovich <red331@mail.ru>   
 */
 
/**
 * Classes for work with WebMoney payment system.
 *  
 * @subpackage WebMoney
 * @author Selihov Sergei Stanislavovich <red331@mail.ru>   
 */
 
/**
 * Documents the plcUkrGarantWebMoneyController class.
 * 
 * Following class is a main controller class for work with webmoney payment system through UkrGarant
 * gate system.
 *    
 * @subpackage plcUkrGarantWebMoneyController
 * @author Selihov Sergei Stanislavovich <red331@mail.ru>   
 */

require_once('Chassis/ErrorHandling/plcPaymentSystemException.php');
require_once('Chassis/PaymentSystems/plcPaymentSystemAbstractController.php');

require_once('Chassis/PaymentSystems/WebMoney/plcUkrGarantWebMoneyModel.php');
require_once('Chassis/PaymentSystems/WebMoney/plcUkrGarantWebMoneyView.php');

class plcUkrGarantWebMoneyController extends plcPaymentSystemAbstractController
    {        
    /**
     * @access protected
     * @var string current payment system alias.
     */	  
    
    protected $PSysAlias = 'UkrGarant';     
                     
    /**
     * @access protected
     * @var string invoice number.
     */	     
    
    protected $InvoiceNum = 0;   
   
    /**
     * @access protected
     * @var string secret key used in creation of hash field.
     */	    
    
    protected $SecretKey = '';  
         
    /* Core methods starts here */
    
    /**
     * Main constructor function.
     * 
     * Main constructor function initialises the work of the object.
     * 
     * @access public
     * 
     * @param int user id (the payer id)
     * @param int user currency id (the payer currency id)
     * @param int shop id (the payment reciever id)
     * @param int shop currency id (the payment reciever currency id)
     * 
     * @throws plcPaymentSystemException
     *                                      
     */      
    
    public function __construct($usrUserId = 0, $usrShopId = 0, $usrPathMainINI = '', $usrPathPSysINI = '')
        {   
        parent::__construct($usrUserId, $usrShopId, $usrPathMainINI, $usrPathPSysINI);
         
        $this->Model = new plcUkrGarantWebMoneyModel($this);
        $this->View = new plcUkrGarantWebMoneyView($this);        
        }
        
        
    public function __destruct()
        {           
        }
                                                
    /**
     * Main function of the payment system to receive and process current bill.
     * 
     * To receive and process the bill this function should be called from the client code. UkrGrant 
     * payment system also requires two additional parameters: WMU purse number of merchant 
     * (payee) and mobile telephone number of the payer. This parameters should be set
     * in the $usrCustomFields variable (fields PAYEE_PURSE and PAYER_PHONE).
     * 
     * @access public
     * 
     * @param float billing sum from shop (in the shops currency)
     * @param int user selected currency (must be one of those that payment system proposes)
     * @param string internal order id of the shop or service provider
     * @param int id of the language in the client system
     * @param string security signature generated by the shop or service provider
     * @param string deal type
     * @param array user additional fields. Must also contain fields:
     * 
     * PAYEE_PURSE - WMU purse number of merchant (payee)
     * PAYER_PHONE - mobile telephone number of the payer. If it is not set - object will try to
     * load phone number from the clients table
     * 
     * @param array custom URL list which are used to redirect user based on different events occurred 
     * during payment process. May contain the following values:
     * 
     * SUCCESS_URL - url to which payer will be redirected on successful payment
     * REJECTED_URL - url to which payer will be redirected on unsuccessful payment attemp  
     * API_URL - API url to which current system will make request to get info on payment status 
     * PENDING_URL - url to which payer will be redirected to receive additional instructions on payment
     * 
     * SUCCESS_METHOD - HTTP method which will be used to redirect user to the SUCCESS_URL (POST or GET, default is GET)
     * REJECTED_METHOD - HTTP method which will be used to redirect user to the REJECTED_URL (POST or GET, default is GET)
     * API_METHOD - HTTP method which will be used to make a request to the API_URL (POST or GET, default is GET)
     * PENDING_METHOD - HTTP method which will be used to redirect user to the PENDING_URL (POST or GET, default is GET)
     * 
     * Note that if all or some of the URLs is not set in the list - class will try to load default URLs
     * based on shop info stored in the database and if default information could not be loaded - redirection
     * will not be used.
     * 
     * @param string payer email
     * @param string description of the deal
     * 
     * @throws plcChassisException, plcPaymentSystemException
     * 
     * @return bool returns TRUE on success and FALSE on fail.
     *                                   
     */       
    
    public function Bill($usrSum, $usrSelCur, $usrOrderId, $usrLang, $usrSign, $usrDealType, $usrCustomFields = array(), $usrCustomShopURLS = array(), $usrEmail = '', $usrDesc = '')
        {
        $tmpUserSum = 0;
        $tmpPhone = FALSE;
        $tmpInvoiceNum = FALSE;
        $tmpAddInfo = array();
        
        /* Payee purse check starts here */
        
        if (is_array($usrCustomFields) === FALSE)
            {
            throw new plcPaymentSystemException('"Custom fields" variable is not array.', 11217, null, 'UkrGrant payment system requires additional fields to be present in "Custom fields" variable.');  
            }
            
        if (array_key_exists('PAYEE_PURSE', $usrCustomFields) === FALSE)
            {
            throw new plcPaymentSystemException('"PAYEE_PURSE" field is not set.', 11218, null, '"PAYEE_PURSE" field must be present in the "Custom fields" variable.');
            }

        if ($this->Model->CheckPurseFormat($usrCustomFields['PAYEE_PURSE']) === FALSE)
            {
            throw new plcPaymentSystemException('Invalid payee purse.', 11219, null, 'Payee purse has invalid format: "'.strval($usrCustomFields['PAYEE_PURSE']).'".');
            }
            
        /* Payee purse check ends here */    
        
        /* Payer phone load starts here */    
            
        if (array_key_exists('PAYER_PHONE', $usrCustomFields) === FALSE)
            {
            $tmpPhone = $this->Model->LoadClientPhoneNum();
                 
            if ($tmpPhone === FALSE)
                {
                throw new plcPaymentSystemException('No payer phone found.', 11220, null, '"PAYER_PHONE" field is not set and no phone info found in the database.');
                }              
            }  
        else
            {
            $tmpPhone = $usrCustomFields['PAYER_PHONE'];
            }
            
        /* Payer phone load ends here */    
        
        /* Deal processing starts here */    
            
        parent::Bill($usrSum, $usrSelCur, $usrOrderId, $usrLang, $usrSign, $usrDealType, $usrCustomFields, $usrCustomShopURLS , $usrEmail, $usrDesc);    
        
        /* Currency conversion and add interest starts here */
            
        $tmpUserSum = $this->Model->ConvertCurrency($this->ShopCurrencyId, $usrSelCur, $usrSum);    
        $tmpUserSum = $this->Model->CalcCommision($tmpUserSum, TRUE);
          
        /* Currency conversion and add interest ends here */
        
        try
            {
            $tmpInvoiceNum = $this->Model->LoadInvoice($usrCustomFields['PAYEE_PURSE'], $tmpUserSum, $tmpPhone, $this->GetDealId(), $usrDesc);
            }
        catch(Exception $usrError)
            {
            $tmpAddInfo['ErrorInfo'] = $usrError->getMessage();
            $tmpAddInfo['ErrorCode'] = $usrError->getCode();
            
            $this->Model->LogApiRequest($tmpAddInfo, 'o', $this->Model->GetLoadInvoiceURL());
            
            throw $usrError;
            }
        
        $tmpAddInfo['InvoiceNumber'] = $tmpInvoiceNum;              
        $this->Model->LogApiRequest($tmpAddInfo, 'o', $this->Model->GetLoadInvoiceURL());    
        
        $this->SetInvoiceNum($tmpInvoiceNum);
        
        /* Deal processing ends here */ 
        
        /* Invoice info saving starts here */
       
        $this->Model->PreSaveInvoice($tmpInvoiceNum, $usrCustomFields['PAYEE_PURSE'], $this->GetDealId(), $tmpPhone, $usrDesc);
        
        /* Invoice info saving ends here */
        }
        
    /**
     * Function that loads invoice details from the remote server as well as invoice details from the 
     * local database.
     *
     * Simple function that loads invoice details from the remote server as well as invoice details from the 
     * local database.
     * 
     * @access public
     * 
     * @param string UkrGarant invoice number
     * 
     * @throws plcPaymentSystemException
     * 
     * @return array|bool returns array on success and FALSE on fail.
     *                                   
     */           
        
    public function LoadInvoiceDetails($usrInvoiceNum)
        {
        if (empty($usrInvoiceNum) === TRUE) {return FALSE;}
        return $this->Model->LoadInvoiceDetails($usrInvoiceNum);
        }
        
    /**
     * Function that loads change amount as check.
     *
     * Simple function that Function that loads change amount as check.
     * 
     * @access public
     * 
     * @param string UkrGarant invoice number
     * 
     * @throws plcPaymentSystemException
     * 
     * @return array|bool returns array on success and FALSE on fail.
     *                                   
     */            
              
    public function LoadInvoiceChange($usrInvoiceNum)
        {
        if (empty($usrInvoiceNum) === TRUE) {return FALSE;}
        return $this->Model->LoadInvoiceChange($usrInvoiceNum);
        }
        
    /**
     * Function that cancels invoice processing on remote server.
     *
     * Simple function that cancels invoice processing on remote server. This function also changes 
     * status field of the corresponding record in the database.
     * 
     * @access public
     * 
     * @param string UkrGarant invoice number
     * 
     * @throws plcChassisException, plcPaymentSystemException
     * 
     * @return array|bool returns array on success and FALSE on fail.
     *                                   
     */           
        
    public function CancelInvoice($usrInvoiceNum)
        {
        if (empty($usrInvoiceNum) === TRUE) {return FALSE;}
        return $this->Model->CancelInvoice($usrInvoiceNum);        
        }
                   
    /* Core methods ends here */      
        
    /* Action methods starts here */
        
    /**
     * Function that used to handle undefined operation.
     * 
     * Simple function that handles undefined operation requested by the external server. 
     * 
     * @access protected
     * 
     * @param string requested operation.
     * 
     * @throws plcPaymentSystemException 
     *                                    
     */          
               
    protected function onUndefinedOperation($usrOperation = '')
        {
        throw new plcPaymentSystemException('Undefined requested operation.', 11216, null, 'Undefined operation: "'.$usrOperation.'".');    
        }
        
    /**
     * Action method that is used to process request from the remote server when the client paid his bill.
     * 
     * If the client paid his bill function will validate all the necessary data and if the data is valid
     * corresponding transaction will be created.
     * 
     * @access protected
     * 
     * @throws plcChassisException, plcPaymentSystemException
     *                                        
     */   
               
    protected function onPaymentNotify()
        {      
        $tmpPOSTContents = $this->Model->LoadPOSTFromStream();    
        if ($this->Model->ValidateInvReq($tmpPOSTContents) === FALSE) {return FALSE;}
                
        $this->Model->UpdateInvoice($tmpPOSTContents);
        $this->Model->NewTransaction($tmpPOSTContents['LMI_INVOICE_NUMBER'], floatval($tmpPOSTContents['LMI_PAYMENT_AMOUNT']));
        }   
        
    /**
     * Main function for handling requests.
     * 
     * This function must be called whenever payment module needs to process external request. 
     * 
     * @access public
     * 
     * @throws plcChassisException, plcPaymentSystemException
     *                                        
     */         
        
    public function onRequest()
        {      
        try
            {
            $this->onPaymentNotify();
            }
        catch (Exception $usrError)
            {
            $this->Model->LogApiRequest('', 'i', $this->Model->GetCurPageURL());
            throw $usrError;
            }
            
        $this->Model->LogApiRequest('', 'i', $this->Model->GetCurPageURL());    
        }
        
    /* Action methods ends here */    
        
    /* Get methods starts here */
                        
    /**
     * Function that returns current invoice number.
     * 
     * Simple function that returns current invoice number.
     * 
     * @access public
     * 
     * @return string current invoice number.
     *                                        
     */          
               
    public function GetInvoiceNum()
        {
        return $this->InvoiceNum;   
        }
        
        
    /**
     * Function that returns current secret key used in creation of hash field.
     * 
     * Simple function that returns current secret key used in creation of hash field. Hash field is 
     * generated when successful response received an invoice number request.
     * 
     * @access public
     * 
     * @return string current secret key.
     *                                        
     */           
        
    public function GetSecretKey()
        {
        return $this->SecretKey;
        } 
                        
    /* Get methods ends here */ 
        
    /* Set methods starts here */
                             
    /**
     * Function that sets current invoice number received from UkrGarant payment system.
     * 
     * Simple function that sets current invoice number received from UkrGarant payment system.
     * 
     * @access public
     * 
     * @param string invoice number.
     *                                        
     */          
               
    public function SetInvoiceNum($usrInvoiceNum)
        {
        $this->InvoiceNum = $usrInvoiceNum;
        }
        
    /**
     * Function that sets current secret key used in creation of hash field.
     * 
     * Simple function that sets current secret key used in creation of hash field. Hash field is 
     * generated when successful response received an invoice number request.
     * 
     * @access public
     * 
     * @param string secret key
     *                                        
     */           
        
    public function SetSecretKey($usrSecKey)
        {
        $this->SecretKey = $usrSecKey;
        }         
        
    /* Set methods ends here */
        
    }   

?>
